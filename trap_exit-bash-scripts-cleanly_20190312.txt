filename: trap_exit-bash-scripts-cleanly_20190312.txt
https://www.putorius.net/using-trap-to-exit-bash-scripts-cleanly.html

Using Trap to Exit Bash Scripts Cleanly
March 10, 2019

$> trap -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGEMT       8) SIGFPE       9) SIGKILL     10) SIGBUS
11) SIGSEGV     12) SIGSYS      13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGURG      17) SIGSTOP     18) SIGTSTP     19) SIGCONT     20) SIGCHLD
21) SIGTTIN     22) SIGTTOU     23) SIGIO       24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGPWR      30) SIGUSR1
31) SIGUSR2     32) SIGRTMIN    33) SIGRTMIN+1  34) SIGRTMIN+2  35) SIGRTMIN+3
36) SIGRTMIN+4  37) SIGRTMIN+5  38) SIGRTMIN+6  39) SIGRTMIN+7  40) SIGRTMIN+8
41) SIGRTMIN+9  42) SIGRTMIN+10 43) SIGRTMIN+11 44) SIGRTMIN+12 45) SIGRTMIN+13
46) SIGRTMIN+14 47) SIGRTMIN+15 48) SIGRTMIN+16 49) SIGRTMAX-15 50) SIGRTMAX-14
51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9
56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4
61) SIGRTMAX-3  62) SIGRTMAX-2  63) SIGRTMAX-1  64) SIGRTMAX

   We have all been there, you write a bash script that creates some temporary files and/or directories
   for processing some information. You complete your script with some basic testing and all is well.
   You set your cron job to run the script every day at noon. Six days later you realize that the script
   has been exiting prematurely and leaving a bunch of trash files in the file system. Or worse,
   potentially sensitive data is left unprotected. Enter the trap command.

   The above scenario is a bit dramatic, but not completely ridiculous. If you are automating tasks with
   bash scripts you will eventually run into a premature exit. Either as the result of an error, a
   change in the environment, or an unanticipated user action. Creating scripts that deal with this
   scenario is imperative to keeping a clean and secure system.

What is Trap?
   Trap is a bash builtin command that is used to respond to process [15]signals. A signal is a
   notification set to a process to notify it of an event.

   The most common signal most people are familiar with is SIGINT (Signal Interrupt) which is sent when
   you press CTRL+C to interrupt a process on the command line.

   There are a lot of signals available to the operating system. For this tutorial we will focus on
   EXIT. The exit signal is a bash builtin and can be used to catch any signal. For all intents and
   purposes, if you trap exit, it will be executed when the shell process terminates.

     Exit the shell, returning a status of n to the shell’s parent. If n is omitted, the exit status is
     that of the last command executed. Any trap on EXIT is executed before the shell terminates.
     -Bash Manual

Display a List of Signal Names and Their Numbers
   You can display a list of signals, and their associated numbers, by using the trap command list
   option ( -l ).
   Screenshot of Linux terminal showing trap command displaying a list of signals

Display a List of Commands Associated to Each Condition

   Using the trap command with no options will display a list of commands associated to each condition.

# trap
 trap -- '' SIGTSTP
 trap -- '' SIGTTIN
 trap -- '' SIGTTOU

The Wrong Way to Clean Up on Exit
   If you have been around long enough you have seen scripts like this with a clean up statement at the
   end.
#!/bin/bash
yum -y update > /tmp/output.txt
if grep -qi "kernel" /tmp/output.txt; then
     mail -s "KERNEL UPDATED" user@example.com < /tmp/output.txt
fi
rm -f /tmp/output.txt

   This is usually a sign of someone trying to clean up after themselves. Which is a good thing, just
   not executed correctly. If the yum command exits for any reason the output.txt file will not be
   deleted. This could get out of hand if the script uses mktemp or a dated filename. It may also be a
   security concern because any user will be able to read the contents of the output.txt file.
   Additionally, if you write a long script that has several exit points, you will have to keep track of
   each exit and ensure you cleanup.

Using Trap on EXIT
   The basic syntax for trap is:
trap [action] [signal]

   or written as the man page calls it:
trap [-lp] [[arg] sigspec ...]

Basic Trap for File Cleanup
   Using an trap to cleanup is simple enough. Here is an example of using trap to clean up a temporary
   file on exit of the script.
#!/bin/bash
trap "rm -f /tmp/output.txt" EXIT
yum -y update > /tmp/output.txt
if grep -qi "kernel" /tmp/output.txt; then
     mail -s "KERNEL UPDATED" user@example.com < /tmp/output.txt
fi

   NOTE: It is important that the trap statement be placed at the beginning of the script to function
   properly. Any commands above the trap can exit and not be caught in the trap.

   Now if the script exits for any reason, it will still run the rm command to delete the file. Here is
   an example of me sending SIGINT (CTRL+C) while the script was running.

# ./test.sh
 ^Cremoved ‘/tmp/output.txt’

   NOTE: I added verbose ( -v ) output to the rm command so it prints “removed”. The ^C signifies where
   I hit CTRL+C to send SIGINT.

   This is a much cleaner and safer way to ensure the cleanup occurs when the script exists. Using EXIT
   ( 0 ) instead of a single defined signal (i.e. SIGINT – 2) ensures the cleanup happens on any exit,
   even successful completion of the script.

Using Traps to Ensure Service Availability
   You can use traps for more than file cleanup. Imagine a scenario where you created a script to stop a
   service to do some automated task. If one of the commands exits during the script, then the service
   would remained stopped. You can use the trap on EXIT to ensure the service comes back up and is
   available.

   Here we will stop the smb (SAMBA) service to [16]create a tar archive of our share. We will use trap
   to ensure the service starts, even if the backup procedure exits.
#!/bin/bash
# Set trap on EXIT for service
trap "systemctl start smb.service" EXIT
# Stop service
systemctl stop smb.service
# Create the tarball
tar czf windows_share.tar.gz /srv/WindowsTeam/
# There is no need to restart the service in the script,
# the trap will catch any exit, even successful

   This may not be the most glamorous example. But I think it delivers the point.

Ensure a Port is Closed After Script Completion
   If you run a script that needs a port opened on the firewall, you don’t want that script to exit and
   leave the port open. Use the trap command:

   Here is an example of me letting my kids watch stuff on my plex server for 2 hours. After two hours
   the ports close up for their roku device and it’s time to read (I am a cord cutter – cable TV rots
   the brain).
#!/bin/bash
trap "iptables -D INPUT -p tcp -s 10.0.0.222 --dport 32400 -j ACCEPT" EXIT
echo "Opening ports for kiddos 2 hours of TV time"
iptables -I INPUT -p tcp -s 10.0.0.222 --dport 32400 -j ACCEPT
sleep 7200

   This is just a small example not my actual script, the real on is more involved than this with a
   countdown timer so I know when to enforce the reading rule. Leave a comment below if the real
   script is of interest to you.

Using a Function in a Trap Call
   If you want to run multiple commands in a trap it may be cleaner to put those commands into a
   function, then simply call the function in the trap statement. We will use our previous examples for
   illustration.
function egress {
     rm -f /tmp/output.txt
     systemctl start smb.service
     iptables -D INPUT -p tcp -s 10.0.0.222 --dport 32400 -j ACCEPT
}
# Call the egress function
trap egress EXIT
# Script contents
# Do some stuff
# Then some more stuff
# Do stuff to the stuff already done
# etc...
# When the script is completed or exits for any reason, the
# commands in the egress function will be executed.

Conclusion
   At the beginning of my Linux experience I spent a lot of time dealing with the fallout of premature
   script exits. The trap command is a simple and effective way to ensure your bash scripts exit
   cleanly.

   In this tutorial we listed all the signals you can trap and there are more bash builtins that we did
   not even mention. I will save those for a future tutorial (DEBUG anybody?).

   We would love to hear the ways you use traps, please comment below if you have some to share!

Resources
     * [001] Signal (IPC) – Wikipedia
     * [002] Man page for trap command


---
https://en.wikipedia.org/wiki/Signal_(IPC)

Signal (IPC)

From Wikipedia, the free encyclopedia
Jump to navigation Jump to search

This article is about signals as a form of IPC. For signals in event-driven processing, see signal
programming.

Signals are a limited form of inter-process communication (IPC), typically used in Unix, Unix-like, and other
POSIX-compliant operating systems. A signal is an asynchronous notification sent to a process or to a
specific thread within the same process in order to notify it of an event that occurred. Signals originated
in 1970s Bell Labs Unix and have been more recently specified in the POSIX standard.

When a signal is sent, the operating system interrupts the target process' normal flow of execution to
deliver the signal. Execution can be interrupted during any non-atomic instruction. If the process has
previously registered a signal handler, that routine is executed. Otherwise, the default signal handler is
executed.

Embedded programs may find signals useful for interprocess communications, as the computational and memory
footprint for signals is small.

Signals are similar to interrupts, the difference being that interrupts are mediated by the processor and
handled by the kernel while signals are mediated by the kernel (possibly via system calls) and handled by
processes. The kernel may pass an interrupt as a signal to the process that caused it (typical examples are
SIGSEGV, SIGBUS, SIGILL and SIGFPE).

History
Version 1 Unix had separate system calls to catch interrupts, quits, and machine traps. Version 4 combined
all traps into one call, signal, and each numbered trap received a symbolic name in Version 7. kill appeared
in Version 2, and in Version 5 could send arbitrary signals. Plan 9 from Bell Labs replaced signals with
notes, which permit sending short, arbitrary strings.

Sending signals
The kill(2) system call sends a specified signal to a specified process, if permissions allow. Similarly, the
kill(1) command allows a user to send signals to processes. The raise(3) library function sends the specified
signal to the current process.

Exceptions such as division by zero or a segmentation violation will generate signals (here, SIGFPE "floating
point exception" and SIGSEGV "segmentation violation" respectively, which both by default cause a core dump
and a program exit).

The kernel can generate signals to notify processes of events. For example, SIGPIPE will be generated when a
process writes to a pipe which has been closed by the reader; by default, this causes the process to
terminate, which is convenient when constructing shell pipelines.

Typing certain key combinations at the controlling terminal of a running process causes the system to send it
certain signals:

  • Ctrl-C (in older Unixes, DEL) sends an INT signal ("interrupt", SIGINT); by default, this causes the
    process to terminate.
  • Ctrl-Z sends a TSTP signal ("terminal stop", SIGTSTP); by default, this causes the process to suspend
    execution.
  • Ctrl-\ sends a QUIT signal (SIGQUIT); by default, this causes the process to terminate and dump core.
  • Ctrl-T (not supported on all UNIXes) sends an INFO signal (SIGINFO); by default, and if supported by the
    command, this causes the operating system to show information about the running command.

These default key combinations with modern operating systems can be changed with the stty command.

Handling signals
Signal handlers can be installed with the signal(2) or sigaction(2) system call. If a signal handler is not
installed for a particular signal, the default handler is used. Otherwise the signal is intercepted and the
signal handler is invoked. The process can also specify two default behaviors, without creating a handler:
ignore the signal (SIG_IGN) and use the default signal handler (SIG_DFL). There are two signals which cannot
be intercepted and handled: SIGKILL and SIGSTOP.

Risks
Signal handling is vulnerable to race conditions. As signals are asynchronous, another signal (even of the
same type) can be delivered to the process during execution of the signal handling routine.

The sigprocmask(2) call can be used to block and unblock delivery of signals. Blocked signals are not
delivered to the process until unblocked. Signals that cannot be ignored (SIGKILL and SIGSTOP) cannot be
blocked.

Signals can cause the interruption of a system call in progress, leaving it to the application to manage a
non-transparent restart.

Signal handlers should be written in a way that does not result in any unwanted side-effects, e.g. errno
alteration, signal mask alteration, signal disposition change, and other global process attribute changes.
Use of non-reentrant functions, e.g., malloc or printf, inside signal handlers is also unsafe. In particular,
the POSIX specification and the Linux man page signal(7) requires that all system functions directly or
indirectly called from a signal function are async-signal safe and gives a list of such async-signal safe
system functions (practically the system calls), otherwise it is an undefined behavior. It is suggested to
simply set some volatile sig_atomic_t variable in a signal handler, and to test it elsewhere.

Signal handlers can instead put the signal into a queue and immediately return. The main thread will then
continue "uninterrupted" until signals are taken from the queue, such as in an event loop. "Uninterrupted"
here means that operations that block may return prematurely and must be resumed, as mentioned above. Signals
should be processed from the queue on the main thread and not by worker pools, as that reintroduces the
problem of asynchronicity. However, managing a queue is not possible in an async-signal safe way with only 
sig_atomic_t, as only single reads and writes to such variables are guaranteed to be atomic, not increments
or (fetch-and)-decrements, as would be required for a queue. Thus, effectively, only one signal per handler
can be queued safely with sig_atomic_t until it has been processed.

Relationship with hardware exceptions
A process's execution may result in the generation of a hardware exception, for instance, if the process
attempts to divide by zero or incurs a TLB miss.

In Unix-like operating systems, this event automatically changes the processor context to start executing a
kernel exception handler. In case of some exceptions, such as a page fault, the kernel has sufficient
information to fully handle the event itself and resume the process's execution.

Other exceptions, however, the kernel cannot process intelligently and it must instead defer the exception
handling operation to the faulting process. This deferral is achieved via the signal mechanism, wherein the
kernel sends to the process a signal corresponding to the current exception. For example, if a process
attempted integer divide by zero on an x86 CPU, a divide error exception would be generated and cause the
kernel to send the SIGFPE signal to the process.

Similarly, if the process attempted to access a memory address outside of its virtual address space, the
kernel would notify the process of this violation via a SIGSEGV signal. The exact mapping between signal
names and exceptions is obviously dependent upon the CPU, since exception types differ between architectures.

POSIX signals
The list below documents the signals specified in the Single Unix Specification. All signals are defined as
macro constants in the <signal.h> header file. The name of the macro constant consists of a "SIG" prefix
followed by a mnemonic name for the signal.

SIGABRT and SIGIOT
    The SIGABRT and SIGIOT signal is sent to a process to tell it to abort, i.e. to terminate. The signal is
    usually initiated by the process itself when it calls abort() function of the C Standard Library, but it
    can be sent to the process from outside like any other signal.
SIGALRM, SIGVTALRM and SIGPROF
    The SIGALRM, SIGVTALRM and SIGPROF signal is sent to a process when the time limit specified in a call to
    a preceding alarm setting function (such as setitimer) elapses. SIGALRM is sent when real or clock time
    elapses. SIGVTALRM is sent when CPU time used by the process elapses. SIGPROF is sent when CPU time used
    by the process and by the system on behalf of the process elapses.
SIGBUS
    The SIGBUS signal is sent to a process when it causes a bus error. The conditions that lead to the signal
    being sent are, for example, incorrect memory access alignment or non-existent physical address.
SIGCHLD
    The SIGCHLD signal is sent to a process when a child process terminates, is interrupted, or resumes after
    being interrupted. One common usage of the signal is to instruct the operating system to clean up the
    resources used by a child process after its termination without an explicit call to the wait system call.
SIGCONT
    The SIGCONT signal instructs the operating system to continue (restart) a process previously paused by
    the SIGSTOP or SIGTSTP signal. One important use of this signal is in job control in the Unix shell.
SIGFPE
    The SIGFPE signal is sent to a process when it executes an erroneous arithmetic operation, such as
    division by zero (the name "FPE", standing for floating-point exception, is a misnomer as the signal
    covers integer-arithmetic errors as well).
SIGHUP
    The SIGHUP signal is sent to a process when its controlling terminal is closed. It was originally
    designed to notify the process of a serial line drop (a hangup). In modern systems, this signal usually
    means that the controlling pseudo or virtual terminal has been closed. Many daemons will reload their
    configuration files and reopen their logfiles instead of exiting when receiving this signal. nohup is
    a command to make a command ignore the signal.
SIGILL
    The SIGILL signal is sent to a process when it attempts to execute an illegal, malformed, unknown, or
    privileged instruction.
SIGINT
    The SIGINT signal is sent to a process by its controlling terminal when a user wishes to interrupt the
    process. This is typically initiated by pressing Ctrl+C, but on some systems, the "delete" character or "
    break" key can be used.
SIGKILL
    The SIGKILL signal is sent to a process to cause it to terminate immediately (kill). In contrast to
    SIGTERM and SIGINT, this signal cannot be caught or ignored, and the receiving process cannot perform any
    clean-up upon receiving this signal. The following exceptions apply:
      □ Zombie processes cannot be killed since they are already dead and waiting for their parent processes
        to reap them.
      □ Processes that are in the blocked state will not die until they wake up again.
      □ The init process is special: It does not get signals that it does not want to handle, and thus it can
        ignore SIGKILL. An exception from this exception is while init is ptraced on Linux.
      □ An uninterruptibly sleeping process may not terminate (and free its resources) even when sent
        SIGKILL. This is one of the few cases in which a UNIX system may have to be rebooted to solve a
        temporary software problem.
    SIGKILL is used as a last resort when terminating processes in most system shutdown procedures if it does
    not voluntarily exit in response to SIGTERM. To speed the computer shutdown procedure, Mac OS X 10.6, aka
    Snow Leopard, will send SIGKILL to applications that have marked themselves "clean" resulting in faster
    shutdown times with, presumably, no ill effects. The command killall -9 has a similar, while
    dangerous effect, when executed e.g. in Linux; it doesn't let programs save unsaved data. It has other
    options, and with none, uses the safer SIGTERM signal.
SIGPIPE
    The SIGPIPE signal is sent to a process when it attempts to write to a pipe without a process connected
    to the other end.
SIGPOLL
    The SIGPOLL signal is sent when an event occurred on an explicitly watched file descriptor. Using it
    effectively leads to making asynchronous I/O requests since the kernel will poll the descriptor in place
    of the caller. It provides an alternative to active polling.
SIGRTMIN to SIGRTMAX
    The SIGRTMIN to SIGRTMAX signals are intended to be used for user-defined purposes. They are real-time
    signals.
SIGQUIT
    The SIGQUIT signal is sent to a process by its controlling terminal when the user requests that the
    process quit and perform a core dump.
SIGSEGV
    The SIGSEGV signal is sent to a process when it makes an invalid virtual memory reference, or
    segmentation fault, i.e. when it performs a segmentation violation.
SIGSTOP
    The SIGSTOP signal instructs the operating system to stop a process for later resumption.
SIGSYS
    The SIGSYS signal is sent to a process when it passes a bad argument to a system call. In practice, this
    kind of signal is rarely encountered since applications rely on libraries (e.g. libc) to make the call
    for them. SIGSYS can be received by applications violating the Linux Seccomp security rules configured to
    restrict them.
SIGTERM
    The SIGTERM signal is sent to a process to request its termination. Unlike the SIGKILL signal, it can be
    caught and interpreted or ignored by the process. This allows the process to perform nice termination
    releasing resources and saving state if appropriate. SIGINT is nearly identical to SIGTERM.
SIGTSTP
    The SIGTSTP signal is sent to a process by its controlling terminal to request it to stop (terminal stop
    ). It is commonly initiated by the user pressing Ctrl+Z. Unlike SIGSTOP, the process can register a
    signal handler for, or ignore, the signal.
SIGTTIN and SIGTTOU
    The SIGTTIN and SIGTTOU signals are sent to a process when it attempts to read in or write out
    respectively from the tty while in the background. Typically, these signals are received only by
    processes under job control; daemons do not have controlling terminals and, therefore, should never
    receive these signals.
SIGTRAP
    The SIGTRAP signal is sent to a process when an exception (or trap) occurs: a condition that a debugger
    has requested to be informed of – for example, when a particular function is executed, or when a
    particular variable changes value.
SIGURG
    The SIGURG signal is sent to a process when a socket has urgent or out-of-band data available to read.
SIGUSR1 and SIGUSR2
    The SIGUSR1 and SIGUSR2 signals are sent to a process to indicate user-defined conditions.
SIGXCPU
    The SIGXCPU signal is sent to a process when it has used up the CPU for a duration that exceeds a certain
    predetermined user-settable value. The arrival of a SIGXCPU signal provides the receiving process a
    chance to quickly save any intermediate results and to exit gracefully, before it is terminated by the
    operating system using the SIGKILL signal.
SIGXFSZ
    The SIGXFSZ signal is sent to a process when it grows a file that exceeds the maximum allowed size.
SIGWINCH
    The SIGWINCH signal is sent to a process when its controlling terminal changes its size (a window ch
    ange).

Signal     Portable   Default action            Description
           number       
SIGABRT    6          Terminate (core dump)     Process abort signal
SIGALRM    14         Terminate                 Alarm clock
SIGBUS     N/A        Terminate (core dump)     Access to an undefined portion of a memory object
SIGCHLD    N/A        Ignore                    Child process terminated, stopped, or continued
SIGCONT    N/A        Continue                  Continue executing, if stopped
SIGFPE     N/A        Terminate (core dump)     Erroneous arithmetic operation
SIGHUP     1          Terminate                 Hangup
SIGILL     N/A        Terminate (core dump)     Illegal instruction
SIGINT     2          Terminate                 Terminal interrupt signal
SIGKILL    9          Terminate                 Kill (cannot be caught or ignored)
SIGPIPE    N/A        Terminate                 Write on a pipe with no one to read it
SIGPOLL    N/A        Terminate                 Pollable event
SIGPROF    N/A        Terminate                 Profiling timer expired
SIGQUIT    3          Terminate (core dump)     Terminal quit signal
SIGSEGV    N/A        Terminate (core dump)     Invalid memory reference
SIGSTOP    N/A        Stop                      Stop executing (cannot be caught or ignored)
SIGSYS     N/A        Terminate (core dump)     Bad system call
SIGTERM    15         Terminate                 Termination signal
SIGTRAP    5          Terminate (core dump)     Trace/breakpoint trap
SIGTSTP    N/A        Stop                      Terminal stop signal
SIGTTIN    N/A        Stop                      Background process attempting read
SIGTTOU    N/A        Stop                      Background process attempting write
SIGUSR1    N/A        Terminate                 User-defined signal 1
SIGUSR2    N/A        Terminate                 User-defined signal 2
SIGURG     N/A        Ignore                    High bandwidth data is available at a socket
SIGVTALRM  N/A        Terminate                 Virtual timer expired
SIGXCPU    N/A        Terminate (core dump)     CPU time limit exceeded
SIGXFSZ    N/A        Terminate (core dump)     File size limit exceeded
SIGWINCH   N/A        Ignore                    Terminal window size changed

Portable number:
    For most signals the corresponding signal number is implementation-defined. This column lists the numbers
    specified in the POSIX standard.

Actions explained:
    Terminate – Abnormal termination of the process. The process is terminated with all the consequences of
    _exit() except that the status made available to wait() and waitpid() indicates abnormal termination by
    the specified signal.
    Terminate (core dump) – Abnormal termination of the process. Additionally, implementation-defined
    abnormal termination actions, such as creation of a core file, may occur.
    Ignore – Ignore the signal.
    Stop – Stop (not terminate) the process.
    Continue – Continue the process, if it is stopped; otherwise, ignore the signal.

Miscellaneous signals[edit]
The following signals are not specified in the POSIX specification. They are, however, sometimes used on
various systems.

SIGEMT
    The SIGEMT signal is sent to a process when an emulator trap occurs.
SIGINFO
    The SIGINFO signal is sent to a process when a status (info) request is received from the controlling
    terminal.
SIGPWR
    The SIGPWR signal is sent to a process when the system experiences a power failure.
SIGLOST
    The SIGLOST signal is sent to a process when a file lock is lost.
SIGSTKFLT
    The SIGSTKFLT signal is sent to a process when the coprocessor experiences a stack fault (i.e. popping
    when the stack is empty or pushing when it is full). It is defined by, but not used on Linux, where
    a x87 coprocessor stack fault will generate SIGFPE instead.
SIGUNUSED
    The SIGUNUSED signal is sent to a process when a system call with an unused system call number is made.
    It is synonymous with SIGSYS on most architectures.
SIGCLD
    The SIGCLD signal is synonymous with SIGCHLD.

    
---
[002]
http://man7.org/linux/man-pages/man1/trap.1p.html

TRAP(1P)                  POSIX Programmer's Manual                 TRAP(1P)

PROLOG
       This manual page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the
       corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       trap — trap signals

SYNOPSIS
       trap n [condition...]
       trap [action condition...]

DESCRIPTION
       If the first operand is an unsigned decimal integer, the shell shall
       treat all operands as conditions, and shall reset each condition to
       the default value. Otherwise, if there are operands, the first is
       treated as an action and the remaining as conditions.

       If action is '−', the shell shall reset each condition to the default
       value. If action is null (""), the shell shall ignore each specified
       condition if it arises. Otherwise, the argument action shall be read
       and executed by the shell when one of the corresponding conditions
       arises. The action of trap shall override a previous action (either
       default action or one explicitly set). The value of "$?" after the
       trap action completes shall be the value it had before trap was
       invoked.

       The condition can be EXIT, 0 (equivalent to EXIT), or a signal
       specified using a symbolic name, without the SIG prefix, as listed in
       the tables of signal names in the <signal.h> header defined in the
       Base Definitions volume of POSIX.1‐2008, Chapter 13, Headers; for
       example, HUP, INT, QUIT, TERM. Implementations may permit names with
       the SIG prefix or ignore case in signal names as an extension.
       Setting a trap for SIGKILL or SIGSTOP produces undefined results.

       The environment in which the shell executes a trap on EXIT shall be
       identical to the environment immediately after the last command
       executed before the trap on EXIT was taken.

       Each time trap is invoked, the action argument shall be processed in
       a manner equivalent to:

           eval action

       Signals that were ignored on entry to a non-interactive shell cannot
       be trapped or reset, although no error need be reported when
       attempting to do so. An interactive shell may reset or catch signals
       ignored on entry. Traps shall remain in place for a given shell until
       explicitly changed with another trap command.

       When a subshell is entered, traps that are not being ignored shall be
       set to the default actions, except in the case of a command
       substitution containing only a single trap command, when the traps
       need not be altered. Implementations may check for this case using
       only lexical analysis; for example, if `trap` and $( trap -- ) do not
       alter the traps in the subshell, cases such as assigning var=trap and
       then using $($var) may still alter them. This does not imply that the
       trap command cannot be used within the subshell to set new traps.

       The trap command with no operands shall write to standard output a
       list of commands associated with each condition. If the command is
       executed in a subshell, the implementation does not perform the
       optional check described above for a command substitution containing
       only a single trap command, and no trap commands with operands have
       been executed since entry to the subshell, the list shall contain the
       commands that were associated with each condition immediately before
       the subshell environment was entered.  Otherwise, the list shall
       contain the commands currently associated with each condition. The
       format shall be:

           "trap −− %s %s ...\n", <action>, <condition> ...

       The shell shall format the output, including the proper use of
       quoting, so that it is suitable for reinput to the shell as commands
       that achieve the same trapping results. For example:

           save_traps=$(trap)
           ...
           eval "$save_traps"

       XSI-conformant systems also allow numeric signal numbers for the
       conditions corresponding to the following signal names:

       1     SIGHUP

       2     SIGINT

       3     SIGQUIT

       6     SIGABRT

       9     SIGKILL

       14    SIGALRM

       15    SIGTERM

       The trap special built-in shall conform to the Base Definitions
       volume of POSIX.1‐2008, Section 12.2, Utility Syntax Guidelines.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       See the DESCRIPTION.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       If the trap name or number is invalid, a non-zero exit status shall
       be returned; otherwise, zero shall be returned. For both interactive
       and non-interactive shells, invalid signal names or numbers shall not
       be considered a syntax error and do not cause the shell to abort.

CONSEQUENCES OF ERRORS
       Default.
       
       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       Write out a list of all traps and actions:
           trap

       Set a trap so the logout utility in the directory referred to by the
       HOME environment variable executes when the shell terminates:
           trap '"$HOME"/logout' EXIT

       or:
           trap '"$HOME"/logout' 0

       Unset traps on INT, QUIT, TERM, and EXIT:
           trap − INT QUIT TERM EXIT

RATIONALE
       Implementations may permit lowercase signal names as an extension.
       Implementations may also accept the names with the SIG prefix; no
       known historical shell does so. The trap and kill utilities in this
       volume of POSIX.1‐2008 are now consistent in their omission of the
       SIG prefix for signal names. Some kill implementations do not allow
       the prefix, and kill −l lists the signals without prefixes.

       Trapping SIGKILL or SIGSTOP is syntactically accepted by some
       historical implementations, but it has no effect. Portable POSIX
       applications cannot attempt to trap these signals.

       The output format is not historical practice. Since the output of
       historical trap commands is not portable (because numeric signal
       values are not portable) and had to change to become so, an
       opportunity was taken to format the output in a way that a shell
       script could use to save and then later reuse a trap if it wanted.

       The KornShell uses an ERR trap that is triggered whenever set −e
       would cause an exit. This is allowable as an extension, but was not
       mandated, as other shells have not used it.

       The text about the environment for the EXIT trap invalidates the
       behavior of some historical versions of interactive shells which, for
       example, close the standard input before executing a trap on 0. For
       example, in some historical interactive shell sessions the following
       trap on 0 would always print "−−":
           trap 'read foo; echo "−$foo−"' 0

       The command:
           trap 'eval " $cmd"' 0

       causes the contents of the shell variable cmd to be executed as a
       command when the shell exits. Using:
           trap '$cmd' 0

       does not work correctly if cmd contains any special characters such
       as quoting or redirections. Using:
           trap " $cmd" 0

       also works (the leading <space> character protects against unlikely
       cases where cmd is a decimal integer or begins with '−'), but it
       expands the cmd variable when the trap command is executed, not when
       the exit action is executed.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

       The Base Definitions volume of POSIX.1‐2008, Section 12.2, Utility
       Syntax Guidelines, signal.h(0p)

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1, 2013 Edition, Standard for Information
       Technology -- Portable Operating System Interface (POSIX), The Open
       Group Base Specifications Issue 7, Copyright (C) 2013 by the
       Institute of Electrical and Electronics Engineers, Inc and The Open
       Group.  (This is POSIX.1-2008 with the 2013 Technical Corrigendum 1
       applied.) In the event of any discrepancy between this version and
       the original IEEE and The Open Group Standard, the original IEEE and
       The Open Group Standard is the referee document. The original
       Standard can be obtained online at [49]http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are
       most likely to have been introduced during the conversion of the
       source files to man page format. To report such errors, see
       [50]https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                 2013                            TRAP(1P)


---
